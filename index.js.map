{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * Copyright 2021 Google Inc. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('__APP_ROOT__/sw.js');\n  });\n} else {\n  // TODO display error message and fail gracefully\n}\n\nconst mainDBName = 'appDB';\nconst objStoreName = 'imageStore';\nconst mainImageName = 'mainImage';\n\nwindow.addEventListener('load', () => {\n  const fileInput = document.querySelector('#input') as HTMLInputElement;\n  const imgElement = document.querySelector('img') as HTMLImageElement;\n  const shareBtn = document.querySelector('#share') as HTMLButtonElement;\n\n  if (!window.indexedDB || !window.URL) { /* TODO: display error message */ }\n\n  const dbOpenRequest = window.indexedDB.open(mainDBName);\n  dbOpenRequest.addEventListener('success', (e) => onDBOpenSuccess(e, imgElement, shareBtn));\n  dbOpenRequest.addEventListener('error', (e) => {\n    console.log('error loading db:', e);\n    // TODO: display error\n  });\n  dbOpenRequest.addEventListener('upgradeneeded', (e) => {\n    console.log(`DB update request:`, e);\n    (e.target as IDBRequest).result.createObjectStore(objStoreName);\n  });\n\n  fileInput.addEventListener('change', (e) => onFileInputChange(e, dbOpenRequest, imgElement, shareBtn));\n\n  shareBtn.addEventListener('click', async () => {\n    const blob = await fetch(imgElement.src).then(r => r.blob());\n    const f = fileFromBlob(blob);\n    navigator.share({files: [f]});\n  });\n});\n\nfunction onDBOpenSuccess(e: Event, imgElement: HTMLImageElement, shareBtn: HTMLButtonElement) {\n  console.log('Database initialized');\n\n  const db = (e.target as IDBRequest).result;\n  const t = db.transaction(objStoreName, 'readonly').objectStore(objStoreName).get(mainImageName);\n  t.addEventListener('success', (e: Event) => {\n    console.log('get success:', e)\n    const b = (e.target as IDBRequest).result;\n    if (!b) return;\n    imgElement.src = window.URL.createObjectURL(b);\n    displayIfShareEnabled(shareBtn, b);\n  });\n  t.addEventListener('error', (e: Event) => {\n    console.log('get error:', e)\n  });\n}\n\nasync function onFileInputChange(e: Event, dbOpenRequest: IDBOpenDBRequest, imgElement: HTMLImageElement, shareBtn: HTMLButtonElement) {\n  const inputElement = e.target as HTMLInputElement;\n\n  console.log(inputElement.value);\n  if (!inputElement.files || !inputElement.files.length) return;\n  const f = inputElement.files[0]; // TODO: null-check\n  const b = new Blob([await f.arrayBuffer()], { type: f.type });\n  // TODO: perhaps prompt before silently replacing old image, if one exists?\n  imgElement.src = window.URL.createObjectURL(b);\n  displayIfShareEnabled(shareBtn, b);\n  const t = dbOpenRequest.result.transaction(objStoreName, 'readwrite').objectStore(objStoreName).put(b, mainImageName);\n  // TODO: display \"saving...\" message/spinner?\n  t.addEventListener('success', (e) => {\n    console.log('put success:', e)\n  });\n  t.addEventListener('error', (e) => {\n    console.log('put error:', e)\n    // TODO: display error\n  });\n  // TODO: add option to remove from storage\n}\n\nfunction displayIfShareEnabled(target: HTMLElement, blob: Blob): void {\n  const f = fileFromBlob(blob);\n  if ('share' in navigator && 'canShare' in navigator &&\n      /** @ts-ignore navigator.canShare isn't included in TypeScript's IDL? */\n      navigator.canShare({files: [f]})) {\n    target.style.display = 'block';\n  }\n}\n\nfunction fileFromBlob(blob: Blob): File {\n  return new File([blob], \"name.png\" /* TODO - name? Maybe we should be storing a File instead of a Blob? */,\n    {type: \"image/png\"});\n}\n"],"names":[],"mappings":"AAgBA,IAAI,mBAAmB,WAAW;AAChC,SAAO,iBAAiB,QAAQ,MAAM;AACpC,cAAU,cAAc,SAAS;AAAA;AAAA;AAMrC,MAAM,aAAa;AACnB,MAAM,eAAe;AACrB,MAAM,gBAAgB;AAEtB,OAAO,iBAAiB,QAAQ,MAAM;AACpC,QAAM,YAAY,SAAS,cAAc;AACzC,QAAM,aAAa,SAAS,cAAc;AAC1C,QAAM,WAAW,SAAS,cAAc;AAIxC,QAAM,gBAAgB,OAAO,UAAU,KAAK;AAC5C,gBAAc,iBAAiB,WAAW,CAAC,MAAM,gBAAgB,GAAG,YAAY;AAChF,gBAAc,iBAAiB,SAAS,CAAC,MAAM;AAC7C,YAAQ,IAAI,qBAAqB;AAAA;AAGnC,gBAAc,iBAAiB,iBAAiB,CAAC,MAAM;AACrD,YAAQ,IAAI,sBAAsB;AAClC,IAAC,EAAE,OAAsB,OAAO,kBAAkB;AAAA;AAGpD,YAAU,iBAAiB,UAAU,CAAC,MAAM,kBAAkB,GAAG,eAAe,YAAY;AAE5F,WAAS,iBAAiB,SAAS,YAAY;AAC7C,UAAM,OAAO,MAAM,MAAM,WAAW,KAAK,KAAK,OAAK,EAAE;AACrD,UAAM,IAAI,aAAa;AACvB,cAAU,MAAM,EAAC,OAAO,CAAC;AAAA;AAAA;AAI7B,yBAAyB,GAAU,YAA8B,UAA6B;AAC5F,UAAQ,IAAI;AAEZ,QAAM,KAAM,EAAE,OAAsB;AACpC,QAAM,IAAI,GAAG,YAAY,cAAc,YAAY,YAAY,cAAc,IAAI;AACjF,IAAE,iBAAiB,WAAW,CAAC,OAAa;AAC1C,YAAQ,IAAI,gBAAgB;AAC5B,UAAM,IAAK,GAAE,OAAsB;AACnC,QAAI,CAAC;AAAG;AACR,eAAW,MAAM,OAAO,IAAI,gBAAgB;AAC5C,0BAAsB,UAAU;AAAA;AAElC,IAAE,iBAAiB,SAAS,CAAC,OAAa;AACxC,YAAQ,IAAI,cAAc;AAAA;AAAA;AAI9B,iCAAiC,GAAU,eAAiC,YAA8B,UAA6B;AACrI,QAAM,eAAe,EAAE;AAEvB,UAAQ,IAAI,aAAa;AACzB,MAAI,CAAC,aAAa,SAAS,CAAC,aAAa,MAAM;AAAQ;AACvD,QAAM,IAAI,aAAa,MAAM;AAC7B,QAAM,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE,gBAAgB,EAAE,MAAM,EAAE;AAEtD,aAAW,MAAM,OAAO,IAAI,gBAAgB;AAC5C,wBAAsB,UAAU;AAChC,QAAM,IAAI,cAAc,OAAO,YAAY,cAAc,aAAa,YAAY,cAAc,IAAI,GAAG;AAEvG,IAAE,iBAAiB,WAAW,CAAC,OAAM;AACnC,YAAQ,IAAI,gBAAgB;AAAA;AAE9B,IAAE,iBAAiB,SAAS,CAAC,OAAM;AACjC,YAAQ,IAAI,cAAc;AAAA;AAAA;AAM9B,+BAA+B,QAAqB,MAAkB;AACpE,QAAM,IAAI,aAAa;AACvB,MAAI,WAAW,aAAa,cAAc,aAEtC,UAAU,SAAS,EAAC,OAAO,CAAC,OAAM;AACpC,WAAO,MAAM,UAAU;AAAA;AAAA;AAI3B,sBAAsB,MAAkB;AACtC,SAAO,IAAI,KAAK,CAAC,OAAO,YACtB,EAAC,MAAM;AAAA"}